// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.lv');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Pievienot komentāru";
Blockly.Msg.CHANGE_VALUE_TITLE = "Mainīt vērtību:";
Blockly.Msg.CLEAN_UP = "Sakopt blokus";
Blockly.Msg.COLLAPSE_ALL = "Sakļaut blokus";
Blockly.Msg.COLLAPSE_BLOCK = "Sakļaut bloku";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "1. krāsa";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "2. krāsa";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "attiecība";
Blockly.Msg.COLOUR_BLEND_TITLE = "sajaukt";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Sajauc kopā divas krāsas ar doto attiecību (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://lv.wikipedia.org/wiki/Krāsa";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Izvēlēties krāsu no paletes.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "nejauša krāsa";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Izvēlēties krāsu pēc nejaušības principa.";
Blockly.Msg.COLOUR_RGB_BLUE = "zila";
Blockly.Msg.COLOUR_RGB_GREEN = "zaļa";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "sarkana";
Blockly.Msg.COLOUR_RGB_TITLE = "veido krāsu no";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Izveidot krāsu ar norādīto daudzumu sarkanā, zaļā un zilā toņu. Visas vērtības ir starp 0 un 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "iet ārā no cikla";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "turpināt ar cikla nākamo iterāciju";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Iet ārā no iekļaujošā cikla";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Nepildīt atlikušo cikla daļu bet sākt nākamo iterāciju.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Brīdinājums: šo bloku drīkst izmantot tikai cikla iekšienē.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "visiem %1 no saraksta %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Katram objektam no saraksta piešķirt mainīgajam '%1' šo objektu un izpildīt komandas.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "skaitīt %1 no %2 līdz %3 ar soli %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Ļauj mainīgajam '%1' pieņemt vērtības no sākuma līdz beigu vērtībai, un izpildīt iekļautos blokus katrai no šīm pieņemtajām vērtībām.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Pievienot nosacījumu \"ja\" blokam.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Pievienot gala nosacījumu \"ja\" blokam.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Pievienot, noņemt vai mainīt sekciju secību šim \"ja\" blokam.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "citādi";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "citādi, ja";
Blockly.Msg.CONTROLS_IF_MSG_IF = "ja";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Ja vērtība ir patiesa, tad izpildīt komandas.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Ja vērtība ir patiesa, tad izpildīt pirmo bloku ar komandām. Citādi izpildīt otro bloku ar komandām.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Ja pirmā vērtība ir patiesa, tad izpildīt pirmo bloku ar komandām. Citādi, ja otrā vērtība ir patiesa, izpildīt otro bloku ar komandām.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Ja pirmā vērtība ir patiesa, tad izpildīt pirmo bloku ar komandām. Citādi, ja otrā vērtība ir patiesa, izpildīt otro bloku ar komandām. Ja neviena no vertībām nav patiesa, tad izpildīt pēdējo bloku ar komandām.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://lv.wikipedia.org/wiki/Cikls";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "izpildi";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "atkārtot %1 reizes";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Izpildīt komandas vairākas reizes.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "atkārtot līdz";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "atkārtot kamēr";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Izpildīt komandas, kamēr vērtība ir nepatiesa.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Izpildīt komandas, kamēr vērtība ir patiesa.";
Blockly.Msg.DELETE_ALL_BLOCKS = "Izdzēst visus %1 blokus?";
Blockly.Msg.DELETE_BLOCK = "Izmest bloku";
Blockly.Msg.DELETE_VARIABLE = "Izdzēst mainīgo \"%1\"";
Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = "Mainīgais \"%2\" tiek izmantots %1 vietās. Dzēst?";
Blockly.Msg.DELETE_X_BLOCKS = "Izmest %1 blokus";
Blockly.Msg.DISABLE_BLOCK = "Atspējot bloku";
Blockly.Msg.DUPLICATE_BLOCK = "Dublēt";
Blockly.Msg.ENABLE_BLOCK = "Iespējot bloku";
Blockly.Msg.EXPAND_ALL = "Izvērst blokus";
Blockly.Msg.EXPAND_BLOCK = "Izvērst bloku";
Blockly.Msg.EXTERNAL_INPUTS = "Ārējie ievaddati";
Blockly.Msg.HELP = "Palīdzība";
Blockly.Msg.INLINE_INPUTS = "Iekšējie ievaddati";
Blockly.Msg.KF_ANIMATION_BOOLEAN_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_BOOLEAN_MESSAGE = "current animation";  // untranslated
Blockly.Msg.KF_ANIMATION_CURRENT_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_CURRENT_MESSAGE = "current animation";  // untranslated
Blockly.Msg.KF_ANIMATION_CURRENT_TOOLTIP = "Returns the current animation that is playing on this game object.";  // untranslated
Blockly.Msg.KF_ANIMATION_FRAME_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_FRAME_MESSAGE_AFTER = "animation frame";  // untranslated
Blockly.Msg.KF_ANIMATION_FRAME_MESSAGE_BEFORE = "goto";  // untranslated
Blockly.Msg.KF_ANIMATION_FRAME_TOOLTIP = "Goes to the selected frame in the current animation. If at the end of an animation it will go to the first frame, or the start if at the end.";  // untranslated
Blockly.Msg.KF_ANIMATION_NUMBERS_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_NUMBERS_MESSAGE = "current animation";  // untranslated
Blockly.Msg.KF_ANIMATION_NUMBERS_TOOLTIP = "Returns a number related to the selected field..";  // untranslated
Blockly.Msg.KF_ANIMATION_PLAY_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_PLAY_MESSAGE = "play animation";  // untranslated
Blockly.Msg.KF_ANIMATION_PLAY_TOOLTIP = "Starts playing an animation on this gameobject.";  // untranslated
Blockly.Msg.KF_ANIMATION_STATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_STATE_MESSAGE = "current animation";  // untranslated
Blockly.Msg.KF_ANIMATION_STATE_TOOLTIP = " The state of the current animation.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_BOOLEAN_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_BOOLEAN_TOOLTIP = "Returns the state of a property selected.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_MESSAGE_AFTER = "side";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_MESSAGE_BEFORE = "on";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_TOOLTIP = "Returns a Boolean indiciating the state of the selected statement for this gameobject.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_GRAVITY_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_GRAVITY_MESSAGE = "gravity";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_GRAVITY_TOOLTIP = "Returns the selected gravity value.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_NUMERIC_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_NUMERIC_TOOLTIP = "Returns a value for the selected property.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_PHYSICS_ENABLED_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_PHYSICS_ENABLED_MESSAGE = "get physics enabled";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_PHYSICS_ENABLED_TOOLTIP = "A boolean indicating if physics are enabled or not.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_ROTATION_FROM_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_ROTATION_FROM_MESSAGE = "get rotation based on";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_ROTATION_FROM_TOOLTIP = "Returns a rotation for the property based on a selected property.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_MESSAGE_ONE = "collidable object of";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_MESSAGE_THREE = "and is on the layer";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_MESSAGE_TWO = "side exists at";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_TOOLTIP = "Returns a boolean indiciating if a colliable object (with the collision shape AND layer as passed) exists at the location passed.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_MESSAGE = "collidable object exists at";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_TOOLTIP = "Returns a boolean indiciating if a colliable object exists at the cooridnates passed. ";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_BOOLEAN_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_BOOLEAN_MESSAGE = "set";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_BOOLEAN_TOOLTIP = "Sets a boolean property selected.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_MESSAGE_AFTER = "side collisions to";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_MESSAGE_BEFORE = "set";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_TOOLTIP = "Sets the sides of this gameobject that can collide with other gameobjects.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_GRAVITY_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_GRAVITY_MESSAGE = "set gravity";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_GRAVITY_TOOLTIP = "Sets the global gravity property to a value passed.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_NUMERIC_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_NUMERIC_MESSAGE = "set";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_NUMERIC_TOOLTIP = "Sets a numeric property selected.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_PHYSICS_ENABLED_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_PHYSICS_ENABLED_MESSAGE = "set physics enabled";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_PHYSICS_ENABLED_TOOLTIP = "Set the state of this objects arcadephysics component.";  // untranslated
Blockly.Msg.KF_BLOCK_DEPRECATED = "Warning: This block is being discontinued";  // untranslated
Blockly.Msg.KF_CAMERA_CENTER_ON_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_CENTER_ON_INSTANCE_MESSAGE = "center camera on";  // untranslated
Blockly.Msg.KF_CAMERA_CENTER_ON_INSTANCE_TOOLTIP = "Centers the cameras to the instances current position.";  // untranslated
Blockly.Msg.KF_CAMERA_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_GET_MESSAGE = "camera";  // untranslated
Blockly.Msg.KF_CAMERA_GET_READ_ONLY_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_GET_READ_ONLY_MESSAGE = "camera";  // untranslated
Blockly.Msg.KF_CAMERA_GET_READ_ONLY_TOOLTIP = "Returns a selected read only property on the camera.";  // untranslated
Blockly.Msg.KF_CAMERA_GET_SPEED_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_GET_SPEED_MESSAGE = "camera pan speed";  // untranslated
Blockly.Msg.KF_CAMERA_GET_SPEED_TOOLTIP = "Returns the cameras pan speed.";  // untranslated
Blockly.Msg.KF_CAMERA_GET_TOOLTIP = "Returns a selected property on the camera.";  // untranslated
Blockly.Msg.KF_CAMERA_LOCK_ON_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_LOCK_ON_MESSAGE = "lock camera on";  // untranslated
Blockly.Msg.KF_CAMERA_LOCK_ON_TOOLTIP = "Locks the camera to an Instance passed.";  // untranslated
Blockly.Msg.KF_CAMERA_PAN_TO_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_PAN_TO_MESSAGE = "camera to";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_GET_MESSAGE = "camera scale";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_GET_TOOLTIP = "Returns the values for the cameras scale on the selected axis.";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_MESSAGE = "camera scale";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_TOOLTIP = "Sets the camera scale on the selected axis to a value passed.";  // untranslated
Blockly.Msg.KF_CAMERA_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_SET_MESSAGE_AFTER = "to";  // untranslated
Blockly.Msg.KF_CAMERA_SET_MESSAGE_BEFORE = "set camera";  // untranslated
Blockly.Msg.KF_CAMERA_SET_SPEED_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_SET_SPEED_MESSAGE = "set camera pan speed";  // untranslated
Blockly.Msg.KF_CAMERA_SET_SPEED_TOOLTIP = "Sets the cameras pan speed to a value passed.";  // untranslated
Blockly.Msg.KF_CAMERA_SET_TOOLTIP = "Sets a selected property on the camera to the value passed.";  // untranslated
Blockly.Msg.KF_CAMERA_STATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_STATE_MESSAGE = "is camera";  // untranslated
Blockly.Msg.KF_CAMERA_STATE_TOOLTIP = "Returns true if the statement is correct.";  // untranslated
Blockly.Msg.KF_CAMERA_UNLOCK_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_UNLOCK_MESSAGE = "unlock camera";  // untranslated
Blockly.Msg.KF_CAMERA_UNLOCK_TOOLTIP = "Unlocks the camera.";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_MESSAGE_AFTER = "at";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_MESSAGE_BEFORE = "create new instance of";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_TOOLTIP = "Creates a new instance of a class type at the location specified.";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_MESSAGE_AFTER = "of";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_MESSAGE_BEFORE = "create new";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_TOOLTIP = "Creates a new instance of a class and assigns a variable to the instance.";  // untranslated
Blockly.Msg.KF_CLASSES_GET_ALL_INSTANCES_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_GET_ALL_INSTANCES_MESSAGE = "get all instances of";  // untranslated
Blockly.Msg.KF_CLASSES_GET_ALL_INSTANCES_TOOLTIP = "Returns a list of all the instances with that class.";  // untranslated
Blockly.Msg.KF_CLASSES_GET_BY_TEXT_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_GET_BY_TEXT_MESSAGE = "get class of";  // untranslated
Blockly.Msg.KF_CLASSES_GET_BY_TEXT_TOOLTIP = "Returns a class of the text passed.";  // untranslated
Blockly.Msg.KF_CLASSES_GET_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_GET_INSTANCE_MESSAGE = "instance of";  // untranslated
Blockly.Msg.KF_CLASSES_GET_INSTANCE_TOOLTIP = "Selects the corresponding instance.";  // untranslated
Blockly.Msg.KF_CLASSES_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_INSTANCE_MESSAGE = "class of";  // untranslated
Blockly.Msg.KF_CLASSES_INSTANCE_TOOLTIP = "Returns the class of the selected instance.";  // untranslated
Blockly.Msg.KF_CLASSES_SELECTOR_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_SELECTOR_TOOLTIP = "Returns the class selected.";  // untranslated
Blockly.Msg.KF_COORDINATE_CREATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_COORDINATE_CREATE_MESSAGE = "create new location at";  // untranslated
Blockly.Msg.KF_COORDINATE_CREATE_TOOLTIP = "Creates a new location";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_ANGLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_ANGLE_MESSAGE = "angle to location";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_ANGLE_TOOLTIP = "Get angle from (0, 0) to this location";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_MESSAGE_ONE = "get";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_MESSAGE_TWO = "of";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_TOOLTIP = "Returns the numeric value for the passed location";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_MESSAGE_ONE = "set";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_MESSAGE_THREE = "to";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_MESSAGE_TWO = "of";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_TOOLTIP = "Sets the selected axis to a defined value for the passed location";  // untranslated
Blockly.Msg.KF_DEVICE_COCOON_MESSAGE = "targeting cocoon";  // untranslated
Blockly.Msg.KF_DEVICE_COCOON_TOOLTIP = "Returns a boolean indicating if the game is currently targeting cocoon.";  // untranslated
Blockly.Msg.KF_DEVICE_COCOON_URL = "";  // untranslated
Blockly.Msg.KF_EVENT_ANIMATION_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_ANIMATION_MESSAGE_AFTER = "has";  // untranslated
Blockly.Msg.KF_EVENT_ANIMATION_MESSAGE_BEFORE = "When the animation";  // untranslated
Blockly.Msg.KF_EVENT_ANIMATION_TOOLTIP = "Fires events when a selected event occurs on the animation passed.";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_DROPDOWN_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_DROPDOWN_MESSAGE = "";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_DROPDOWN_TOOLTIP = "Executes every frame. The order of execution depends on the choosen dropdown item.";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_MESSAGE = "Constantly";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_TOOLTIP = "The event triggered every frame";  // untranslated
Blockly.Msg.KF_EVENT_CREATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_CREATE_MESSAGE = "When created";  // untranslated
Blockly.Msg.KF_EVENT_CREATE_TOOLTIP = "The event triggered when this game object is created";  // untranslated
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_MESSAGE_ONE = "When key";  // untranslated
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_MESSAGE_TWO = "updates";  // untranslated
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_EVENT_INST_INPUT_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_INST_INPUT_MESSAGE = "When the player ";  // untranslated
Blockly.Msg.KF_EVENT_INST_INPUT_TOOLTIP = "The event is triggered when the player releases/presses (click/touch) a given instance";  // untranslated
Blockly.Msg.KF_EVENT_INST_PRESS_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_INST_PRESS_MESSAGE = "When the player presses on ";  // untranslated
Blockly.Msg.KF_EVENT_INST_PRESS_TOOLTIP = "The event triggered when the player presses a click/touch on the given instance.";  // untranslated
Blockly.Msg.KF_EVENT_INST_RELEASE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_INST_RELEASE_MESSAGE = "When the player releases over ";  // untranslated
Blockly.Msg.KF_EVENT_INST_RELEASE_TOOLTIP = "The event triggered when the player releases a click/touch on the given instance.";  // untranslated
Blockly.Msg.KF_EVENT_KEY_INPUT_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_KEY_INPUT_MESSAGE = "When the player";  // untranslated
Blockly.Msg.KF_EVENT_KEY_INPUT_TOOLTIP = "The event is triggered when the player presses/releases the given key on their keyboard.";  // untranslated
Blockly.Msg.KF_EVENT_KEY_PRESS_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_KEY_PRESS_MESSAGE = "When the player presses";  // untranslated
Blockly.Msg.KF_EVENT_KEY_PRESS_TOOLTIP = "The event triggered when the player presses the given key on their keyboard.";  // untranslated
Blockly.Msg.KF_EVENT_KEY_RELEASE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_KEY_RELEASE_MESSAGE = "When the player releases";  // untranslated
Blockly.Msg.KF_EVENT_KEY_RELEASE_TOOLTIP = "The event triggered when the player releases the given key on their keyboard.";  // untranslated
Blockly.Msg.KF_EVENT_LEVEL_START_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_LEVEL_START_MESSAGE = "When the level";  // untranslated
Blockly.Msg.KF_EVENT_LEVEL_START_TOOLTIP = "Executes when the current level starts. Only executes when a level starts up.";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_MESSAGE_AFTER = "is retrieved";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_MESSAGE_BEFORE = "When a message of";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_TOOLTIP = "Send events when the player";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_MESSAGE_ONE = "When a message of";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_MESSAGE_TWO = "is retrieved";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_TOOLTIP = "Executed when a message is retrieved. You can use this block to get a value send from the message with value blocks.";  // untranslated
Blockly.Msg.KF_EVENT_POST_CONSTANTLY_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_POST_CONSTANTLY_MESSAGE = "Post Constantly";  // untranslated
Blockly.Msg.KF_EVENT_POST_CONSTANTLY_TOOLTIP = "Triggered every frame AFTER the constantly event blocks.";  // untranslated
Blockly.Msg.KF_EVENT_PRE_CONSTANTLY_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_PRE_CONSTANTLY_MESSAGE = "Pre Constantly";  // untranslated
Blockly.Msg.KF_EVENT_PRE_CONSTANTLY_TOOLTIP = "Triggered every frame BEFORE the constantly event blocks.";  // untranslated
Blockly.Msg.KF_EVENT_REMOVE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_REMOVE_MESSAGE = "When removed";  // untranslated
Blockly.Msg.KF_EVENT_REMOVE_TOOLTIP = "The event is triggered when this gameobject is destroyed.";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_INPUT_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_INPUT_MESSAGE = "When the stage is";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_INPUT_TOOLTIP = "The event is trggered when the player either pressed or releases anywhere in the game scene.";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_PRESS_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_PRESS_MESSAGE = "When stage is pressed";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_PRESS_TOOLTIP = "The event triggered when the player presses a click/touch down anywhere in the game scene.";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_RELEASE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_RELEASE_MESSAGE = "When stage is released";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_RELEASE_TOOLTIP = "The event triggered when the player releases a click/touch anywhere in the game scene.";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_TOUCHED_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_TOUCHED_MESSAGE = "When the stage is";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_TOUCHED_TOOLTIP = "Executes when the stage is touched.";  // untranslated
Blockly.Msg.KF_EVENT_TIME_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_TIME_MESSAGE_AFTER = "milliseconds";  // untranslated
Blockly.Msg.KF_EVENT_TIME_SINGLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_TIME_SINGLE_MESSAGE_AFTER = "milliseconds have passed";  // untranslated
Blockly.Msg.KF_EVENT_TIME_SINGLE_TOOLTIP = "Triggers the inner blocks after the set period of time has occured. Warning: Does not check to see if the object was destroyed before the event fires.";  // untranslated
Blockly.Msg.KF_EVENT_TIME_TOOLTIP = "Triggers the event when the number of milliseconds set has passed. The number of milliseconds passed is not dynamic, meaning that it will not update once set.";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_ON_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_ON_MESSAGE = "When I am touched by";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_ON_TOOLTIP = "Triggers the inner blocks when this instance collides with the instance passed.";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_RETURN_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_RETURN_MESSAGE = "When I am touched get";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_RETURN_TOOLTIP = "Whenever this instance is touched by another instance (using arcadephysics) it will set a variable to that instance who touched it.";  // untranslated
Blockly.Msg.KF_GAME_GET_TIME_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_GET_TIME_MESSAGE = "time";  // untranslated
Blockly.Msg.KF_GAME_GET_TIME_TOOLTIP = "Returns the associate time method associated.";  // untranslated
Blockly.Msg.KF_GAME_GOTO_LEVEL_NUM_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_GOTO_LEVEL_NUM_MESSAGE = "go to";  // untranslated
Blockly.Msg.KF_GAME_GOTO_LEVEL_NUM_TOOLTIP = "Changes the current level to the level specified.";  // untranslated
Blockly.Msg.KF_GAME_LEVEL_SPECIAL_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_LEVEL_SPECIAL_TOOLTIP = "A list of special levels, they include previous/current/next and the first/last levels.";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_COLOUR_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_COLOUR_MESSAGE = "stage colour";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_COLOUR_TOOLTIP = "Gets the colour of the game background.";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_SIZE_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_SIZE_TOOLTIP = "Gets the size of the games viewport on the screen.";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_COLOUR_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_COLOUR_MESSAGE = "set stage colour to";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_COLOUR_TOOLTIP = "Sets the colour of the game background.";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_SIZE_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_SIZE_TOOLTIP = "Sets the size of the games viewport on the screen.";  // untranslated
Blockly.Msg.KF_GAME_TIME_METHOD_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_TIME_METHOD_MESSAGE = "time";  // untranslated
Blockly.Msg.KF_GAME_TIME_METHOD_TOOLTIP = "Pauses or resumes the clock, thus pausing/resume gameplay.";  // untranslated
Blockly.Msg.KF_GET_DEBUG_MODE_MESSAGE = "get debug mode";  // untranslated
Blockly.Msg.KF_GET_DEBUG_MODE_TOOLTIP = "Returns the boolean indiciating if debug mode is currently on or off";  // untranslated
Blockly.Msg.KF_GET_DEBUG_MODE_URL = "";  // untranslated
Blockly.Msg.KF_HITBOX_DIMENSIONS_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_HITBOX_DIMENSIONS_GET_MESSAGE = "get hitbox";  // untranslated
Blockly.Msg.KF_HITBOX_DIMENSIONS_GET_TOOLTIP = "Returns the selected dimensions of the hitbox in world coordinates.";  // untranslated
Blockly.Msg.KF_HITBOX_OFFSET_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_HITBOX_OFFSET_GET_MESSAGE = "get hitbox offset";  // untranslated
Blockly.Msg.KF_HITBOX_OFFSET_GET_TOOLTIP = "Returns the difference between the hitbox position and the instances position.";  // untranslated
Blockly.Msg.KF_HITBOX_POSITION_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_HITBOX_POSITION_GET_MESSAGE = "get hitbox";  // untranslated
Blockly.Msg.KF_HITBOX_POSITION_GET_TOOLTIP = "Returns the selected position of the hitbox in world coordinates.";  // untranslated
Blockly.Msg.KF_INPUT_FINGERS_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGERS_MESSAGE = "all fingers";  // untranslated
Blockly.Msg.KF_INPUT_FINGERS_TOOLTIP = "Returns a list of all the finger objects.";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_BOOL_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_BOOL_MESSAGE = "is";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_BOOL_TOOLTIP = "Returns a boolean associated with the selected statement.";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_COORDS_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_COORDS_MESSAGE = "of";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_COORDS_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_TIMES_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_TIMES_MESSAGE = "of";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_TIMES_TOOLTIP = "A number associated with the time selected.";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_LATEST_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_LATEST_MESSAGE = "latest finger";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_LATEST_TOOLTIP = "The finger which was used in the last event.";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_SELECT_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_SELECT_MESSAGE = "finger";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_SELECT_TOOLTIP = "Returns the finger associated with the number passed.";  // untranslated
Blockly.Msg.KF_INPUT_MOUSE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_MOUSE_MESSAGE = "of mouse";  // untranslated
Blockly.Msg.KF_INPUT_MOUSE_TOOLTIP = "The position of the mouse in the current level";  // untranslated
Blockly.Msg.KF_INSTANCE_ADD_TAG_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_ADD_TAG_MESSAGE_AFTER = "on";  // untranslated
Blockly.Msg.KF_INSTANCE_ADD_TAG_MESSAGE_BEFORE = "tag";  // untranslated
Blockly.Msg.KF_INSTANCE_ADD_TAG_TOOLTIP = "Adds a tag passed to the given gameobject.";  // untranslated
Blockly.Msg.KF_INSTANCE_DEATH_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_DEATH_MESSAGE = "destroy";  // untranslated
Blockly.Msg.KF_INSTANCE_DEATH_TOOLTIP = "Destroys the selected instance. Destruction cannot be reverted!";  // untranslated
Blockly.Msg.KF_INSTANCE_EXECUTE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_EXECUTE_MESSAGE = "Execute";  // untranslated
Blockly.Msg.KF_INSTANCE_EXECUTE_TOOLTIP = "Executes the text directly pasted as code.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_ALL_BY_TAG_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_ALL_BY_TAG_MESSAGE = "get all children by tag";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_ALL_BY_TAG_TOOLTIP = "Returns a list of all the instances that have the tag passed.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_BY_TAG_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_BY_TAG_MESSAGE = "instance by tag";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_BY_TAG_TOOLTIP = "Returns a single instance by the tag passed.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_DIMENSIONS_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_DIMENSIONS_TOOLTIP = "Width or height of this object. Actual height includes current scale. Raw height is simply image size.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_LOCATION_FROM_POSITION_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_LOCATION_FROM_POSITION_TOOLTIP = "Gets the location of the given instance.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_TOOLTIP = "Gets the value of a selected property of the given instance.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_VISIBLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_VISIBLE_MESSAGE = "get visibility of";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_VISIBLE_TOOLTIP = "Returns visibility state of this gameobject. An alpha of zero is does not mean that the visiblity is false.";  // untranslated
Blockly.Msg.KF_INSTANCE_HAS_TAG_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_HAS_TAG_MESSAGE = "has tag";  // untranslated
Blockly.Msg.KF_INSTANCE_HAS_TAG_TOOLTIP = "Returns a boolean indicating if the gameobject has the tag or not.";  // untranslated
Blockly.Msg.KF_INSTANCE_MOVE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_MOVE_TOOLTIP = "Changes the depth (layer ordering) of an instance passed by the selected dropdown method.";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_MESSAGE_ONE = "get key";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_MESSAGE_TWO = "on";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_MESSAGE_ONE = "set key";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_MESSAGE_THREE = "on";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SELECT_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SELECT_MESSAGE = "instance ";  // untranslated
Blockly.Msg.KF_INSTANCE_SELECT_TOOLTIP = "Selects a game object with the corresponding id.";  // untranslated
Blockly.Msg.KF_INSTANCE_SELF_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SELF_MESSAGE = "myself";  // untranslated
Blockly.Msg.KF_INSTANCE_SELF_TOOLTIP = "The game object that this script is attached to.";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_POSITION_FROM_LOCATION_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_POSITION_FROM_LOCATION_TOOLTIP = "Sets the object X and Y to a given location.";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_TOOLTIP = "Sets the selected property of a given instance to a new value.";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_MESSAGE_AFTER = "to";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_MESSAGE_BEFORE = "set visibility of";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_TOOLTIP = "Sets whether the gameobject should be renderer or not. An alpha of zero is does not mean that the visiblity is false.";  // untranslated
Blockly.Msg.KF_INTERSECTS_CONTAINS_HELPURL = "";  // untranslated
Blockly.Msg.KF_INTERSECTS_CONTAINS_MESSAGE = "contains";  // untranslated
Blockly.Msg.KF_INTERSECTS_OVERLAPS_HELPURL = "";  // untranslated
Blockly.Msg.KF_INTERSECTS_OVERLAPS_MESSAGE = "overlaps";  // untranslated
Blockly.Msg.KF_INTERSECTS_OVERLAPS_TOOLTIP = "Checks to see if the two passed instances overlap.";  // untranslated
Blockly.Msg.KF_KEY_SPECIAL_HELPURL = "";  // untranslated
Blockly.Msg.KF_KEY_SPECIAL_MESSAGE = "key:";  // untranslated
Blockly.Msg.KF_KEY_SPECIAL_TOOLTIP = "A special keyboard key";  // untranslated
Blockly.Msg.KF_MATH_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_AFTER = "to";  // untranslated
Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_BEFORE = "from";  // untranslated
Blockly.Msg.KF_MATH_INSTANCE_TOOLTIP = "Returns the selected value between two instances.";  // untranslated
Blockly.Msg.KF_MATH_LERP_HELPURL = "";  // untranslated
Blockly.Msg.KF_MATH_LERP_MESSAGE_ONE = "linear interpolation from";  // untranslated
Blockly.Msg.KF_MATH_LERP_MESSAGE_THREE = "by";  // untranslated
Blockly.Msg.KF_MATH_LERP_MESSAGE_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_MATH_LERP_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_MATH_UTILS_HELPURL = "";  // untranslated
Blockly.Msg.KF_MATH_UTILS_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_MATH_XY_TO_XY_HELPURL = "";  // untranslated
Blockly.Msg.KF_MATH_XY_TO_XY_TOOLTIP = "Returns the selected value between an instance and a location passed.";  // untranslated
Blockly.Msg.KF_MESSAGING_CLASS_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_CLASS_MESSAGE_AFTER = "to all";  // untranslated
Blockly.Msg.KF_MESSAGING_CLASS_MESSAGE_BEFORE = "send message";  // untranslated
Blockly.Msg.KF_MESSAGING_CLASS_TOOLTIP = "Sends a message to all instances of a class you pass.";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_MESSAGE = "send every gameobject a message of";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_TOOLTIP = "Sends a message to every gameobject.";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_MESSAGE_ONE = "send message to everyone";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_MESSAGE_TWO = "with a value of";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_TOOLTIP = "Sends a message and value defined to every gameobject.";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_MESSAGE_AFTER = "to";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_MESSAGE_BEFORE = "send message";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_TOOLTIP = "Sends a message to a singular instance you passed.";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_MESSAGE_ONE = "send message";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_MESSAGE_THREE = "with a value of";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_TOOLTIP = "Sends a message and value to an instance.";  // untranslated
Blockly.Msg.KF_MESSAGING_LIST_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_LIST_MESSAGE_AFTER = "to each instance in";  // untranslated
Blockly.Msg.KF_MESSAGING_LIST_MESSAGE_BEFORE = "send message";  // untranslated
Blockly.Msg.KF_MESSAGING_LIST_TOOLTIP = "Sends a message to every instance in a list.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_MESSAGE_ONE = "set colour of shape";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_TOOLTIP = "Sets the colour a shape will render to a particular value.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_MESSAGE_AFTER = "with a radius of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_MESSAGE_BEFORE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_TOOLTIP = "Creates a new circle with a radius that you set.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_MESSAGE_ONE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_MESSAGE_THREE = "with a width of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_MESSAGE_TWO = "from origin to";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_TOOLTIP = "Creates a new line from the transforms origin to a point in space.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_FOUR = " edges";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_ONE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_THREE = " and ";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_TWO = "with a radius of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_TOOLTIP = "Creates a new polygon.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_MESSAGE_AFTER = "with a width/height of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_MESSAGE_BEFORE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_TOOLTIP = "Creates a new rectangle with a width and height that you set.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_FOUR = "points";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_ONE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_THREE = "and";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_TWO = "with a radius of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_TOOLTIP = "Creates a new star with a specified number of points.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_GET_COLOUR_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_GET_COLOUR_MESSAGE = "get colour of shape";  // untranslated
Blockly.Msg.KF_PRIMITIVES_GET_COLOUR_TOOLTIP = "Returns the colour of a shape passed.";  // untranslated
Blockly.Msg.KF_SET_DEBUG_MODE_MESSAGE = "set debug mode";  // untranslated
Blockly.Msg.KF_SET_DEBUG_MODE_TOOLTIP = "Sets the debug mode of the game";  // untranslated
Blockly.Msg.KF_SET_DEBUG_MODE_URL = "";  // untranslated
Blockly.Msg.KF_SOUND_BACKGROUND_STATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_BACKGROUND_STATE_MESSAGE = "music";  // untranslated
Blockly.Msg.KF_SOUND_BACKGROUND_STATE_TOOLTIP = "Pauses or resumes the current background track.";  // untranslated
Blockly.Msg.KF_SOUND_GET_EDITOR_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_GET_EDITOR_MESSAGE = "audio";  // untranslated
Blockly.Msg.KF_SOUND_GET_EDITOR_TOOLTIP = "Gets audio from the Editor";  // untranslated
Blockly.Msg.KF_SOUND_GET_MUTE_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_GET_MUTE_MESSAGE = "mute";  // untranslated
Blockly.Msg.KF_SOUND_GET_MUTE_TOOLTIP = "Sets the mute state of the selected piece of audio by a boolean passed.";  // untranslated
Blockly.Msg.KF_SOUND_GET_VOLUME_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_GET_VOLUME_MESSAGE = "get volume";  // untranslated
Blockly.Msg.KF_SOUND_GET_VOLUME_TOOLTIP = "Gets the volume of all sounds played. A number from 0 - 100.";  // untranslated
Blockly.Msg.KF_SOUND_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_BACKGROUND_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_BACKGROUND_MESSAGE = "play music";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_BACKGROUND_TOOLTIP = "Starts playing the specified music from the beginning.";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_EFFECT_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_EFFECT_MESSAGE = "play sound effect";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_EFFECT_TOOLTIP = "Plays the given sound effect once.";  // untranslated
Blockly.Msg.KF_SOUND_SET_MUTE_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_SET_MUTE_MESSAGE = "mute";  // untranslated
Blockly.Msg.KF_SOUND_SET_MUTE_TOOLTIP = "Sets the mute state of the selected piece of audio by a boolean passed.";  // untranslated
Blockly.Msg.KF_SOUND_SET_VOLUME_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_SET_VOLUME_MESSAGE = "set volume";  // untranslated
Blockly.Msg.KF_SOUND_SET_VOLUME_TOOLTIP = "Sets the volume of all sounds played. A number from 0 - 100.";  // untranslated
Blockly.Msg.KF_SOUND_STOP_BACKGROUND_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_STOP_BACKGROUND_MESSAGE = "stop the current music";  // untranslated
Blockly.Msg.KF_SOUND_STOP_BACKGROUND_TOOLTIP = "Stops playing the current music and clears the playhead. If resumed it will start from the beginning.";  // untranslated
Blockly.Msg.KF_SOUND_TOOLTIP = "A list of all the sounds included in the game.";  // untranslated
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_MESSAGE_ONE = "set text alignment of";  // untranslated
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_TOOLTIP = "Sets the alignment of a textfield to a selected value in the dropdown";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_GET_MESSAGE = "get font colour of";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_GET_TOOLTIP = "Returns the font colour of a textfield";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_SET_MESSAGE_ONE = "set font colour of";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_SET_TOOLTIP = "Sets the font colour of a passed textfield to a colour passed";  // untranslated
Blockly.Msg.KF_TEXT_CREATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_CREATE_MESSAGE_ONE = "create new";  // untranslated
Blockly.Msg.KF_TEXT_CREATE_MESSAGE_TWO = "with text";  // untranslated
Blockly.Msg.KF_TEXT_CREATE_TOOLTIP = "Creates a new textfield.";  // untranslated
Blockly.Msg.KF_TEXT_FAMILY_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_FAMILY_SET_MESSAGE_ONE = "set font family of";  // untranslated
Blockly.Msg.KF_TEXT_FAMILY_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_FAMILY_SET_TOOLTIP = "Sets the font family that a textfield should use.";  // untranslated
Blockly.Msg.KF_TEXT_FONT_PRESETS_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_FONT_PRESETS_TOOLTIP = "Returns the string which identifies the font family selected";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_GET_MESSAGE_ONE = "get";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_GET_MESSAGE_TWO = "of";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_GET_TOOLTIP = "Returns the current value of the selected property from a textfield";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_MESSAGE_ONE = "set";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_MESSAGE_THREE = "to";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_MESSAGE_TWO = "of";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_TOOLTIP = "Sets the numeric value of a textfield to the value passed";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_GET_MESSAGE = "get text of";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_GET_TOOLTIP = "Returns the text of a textfield";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_SET_MESSAGE_ONE = "set text of";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_SET_TOOLTIP = "Sets the text which a textfield should display textfield to a string passed";  // untranslated
Blockly.Msg.KF_TEXT_WEIGHT_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_WEIGHT_SET_MESSAGE_ONE = "set text weight of";  // untranslated
Blockly.Msg.KF_TEXT_WEIGHT_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_WEIGHT_SET_TOOLTIP = "Sets the font weight of a textfield to a selected value in the dropdown";  // untranslated
Blockly.Msg.KF_TYPE_BOOLEAN = "True/False";  // untranslated
Blockly.Msg.KF_TYPE_INSTANCE = "Instance";  // untranslated
Blockly.Msg.KF_TYPE_NUMBER = "Number";  // untranslated
Blockly.Msg.KF_TYPE_STRING = "Text";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "izveidot tukšu sarakstu";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Izveidot sarakstu bez elementiem tajā.";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "saraksts";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Pievienot, noņemt vai mainīt sekciju secību šim \"saraksta\" blokam.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "izveidot sarakstu no";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Pievienot objektu sarakstam.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Izveidot sarakstu no jebkura skaita vienību.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "pirmo";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "no beigām numur";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "paņemt";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "paņemt uz dzēst";
Blockly.Msg.LISTS_GET_INDEX_LAST = "pēdējo";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "nejauši izvēlētu";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "dzēst";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Atgriež pirmo saraksta elementu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Atgriež norādīto elementu no saraksta.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Atgriež pēdējo saraksta elementu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Atgriež nejauši izvēlētu saraksta elementu";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Atgriež un izdzēš saraksta pirmo elementu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Atgriež un izdzēš no saraksta norādīto elementu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Atgriež un izdzēš saraksta pēdējo elementu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Atgriež un izdzēš no saraksta nejauši izvēlētu elementu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Izdēš pirmo saraksta elementu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = "Izdēš norādīto elementu no saraksta.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Izdēš pēdējo saraksta elementu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Izdzēš no saraksta nejauši izvēlētu elementu.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "līdz pozīcijai no beigām";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "līdz pozīcijai";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "līdz beigām";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "paņemt apakšsarakstu no sākuma";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "paņemt apakšsarakstu no beigām no pozīcijas";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "paņemt apakšsarakstu no pozīcijas";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Nokopēt daļu no dotā saraksta.";
Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = "Saraksta elementu numerācija no beigām sākas no %1";
Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "Saraksta elementu numerācija sākas no %1";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "atrast pirmo elementu, kas vienāds ar";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "atrast pēdējo elementu, kas vienāds ar";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Atgriež pozīciju sarakstā, kurā atrodas dotais objekts. Atgriež %1 ja objekts neatrodas sarakstā.";
Blockly.Msg.LISTS_INLIST = "sarakstā";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 ir tukšs";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Patiess, ja saraksts ir tukšs.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "%1 garums";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Atgriež elementu skaitu srakstā.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "saraksts no %1 atkārtots %2 reizes";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Izveido sarakstu, kas sastāv no dotās vērtības noteiktu reižu skaita.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "kā";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "ievieto";
Blockly.Msg.LISTS_SET_INDEX_SET = "aizvieto";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Ievieto elementu saraksta sākumā.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = "Ievieto sarakstā elementu norādītajā pozīcijā.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Pievieno elementu saraksta beigās.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Ievieto sarakstā jaunu elementu nejauši izvēlētā pozīcijā.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Aizvieto elementu saraksta sākumā.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = "Aizvieto sarakstā elementu norādītajā pozīcijā.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Aizvieto elementu saraksta beigās.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Aizvieto sarakstā elementu nejauši izvēlētā pozīcijā.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "augošā";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "dilstošā";
Blockly.Msg.LISTS_SORT_TITLE = "Sakārtot sarakstu no %3 elementiem %2 secībā %1";
Blockly.Msg.LISTS_SORT_TOOLTIP = "Saraksta sakārtota kopija.";
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "pēc alfabēta, ignorēt mazos/lielos burtus";
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "skaitliski";
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "pēc alfabēta";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "vārdu saraksts no teksta";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "izveidot tekstu no saraksta";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Apvienot tekstu izmantojot atdalītāju.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Sadalīt tekstu vārdos izmantojot atdalītāju.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "ar atdalītāju";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "aplams";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Atgriež rezultātu \"patiess\" vai \"aplams\".";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "patiess";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://lv.wikipedia.org/wiki/Nevien%C4%81d%C4%ABba";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Patiess, ja abas puses ir vienādas.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Patiess, ja kreisā puse ir lielāka par labo pusi.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Patiess, ja kreisā puse ir lielāka vai vienāda ar labo pusi.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Patiess, ja kreisā puse ir mazāka par labo pusi.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Patiess, ja kreisā puse ir mazāka vai vienāda ar labo pusi.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Patiess, ja abas puses nav vienādas.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "ne %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Patiess, ja arguments ir aplams.";
Blockly.Msg.LOGIC_NULL = "nekas";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Atgriež neko.";
Blockly.Msg.LOGIC_OPERATION_AND = "un";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "vai";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Patiess, ja abas puses ir patiesas.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Patiess, ja vismaz viena puse ir patiesa.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "nosacījums";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "ja aplams";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "ja patiess";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Pārbaudīt nosacījumu. Ja 'nosacījums' ir patiess, atgriež vērtību 'ja patiess', pretējā gadījumā vērtību 'ja aplams'.";
Blockly.Msg.LOG_HELPURL = "";  // untranslated
Blockly.Msg.LOG_MESSAGE = "Log";  // untranslated
Blockly.Msg.LOG_TOOLTIP = "Log a value to the console";  // untranslated
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://lv.wikipedia.org/wiki/Aritm%C4%93tika";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Atgriež divu skaitļu summu.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Atgriež divu skaitļu dalījumu.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Atgriež divu skaitļu starpību.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Atgriež divu skaitļu reizinājumu.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Atgriež pirmo skaitli kāpinātu pakāpē otrais skaitlis.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "izmainīt %1 par %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Pieskaitīt doto skaitli mainīgajam '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Atgriež kādu no matemātikas konstantēm: π (3.141…), e (2.718…), φ (1.618…), √(2) (1.414…), √(½) (0.707…), ∞ (bezgalība).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "ierobežot %1 no %2 līdz %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Ierobežo skaitli no noteiktajās robežās (ieskaitot galapunktus).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "dalās bez atlikuma ar";
Blockly.Msg.MATH_IS_EVEN = "ir pāra";
Blockly.Msg.MATH_IS_NEGATIVE = "ir negatīvs";
Blockly.Msg.MATH_IS_ODD = "ir nepāra";
Blockly.Msg.MATH_IS_POSITIVE = "ir pozitīvs";
Blockly.Msg.MATH_IS_PRIME = "ir pirmskaitlis";
Blockly.Msg.MATH_IS_TOOLTIP = "Pārbauda, vai skaitlis ir pāra, nepāra, vesels, pozitīvs, negatīvs vai dalās ar noteiktu skaitli. Atgriež \"patiess\" vai \"aplams\".";
Blockly.Msg.MATH_IS_WHOLE = "ir vesels";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "atlikums no %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Atlikums no divu skaitļu dalījuma.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://lv.wikipedia.org/wiki/Skaitlis";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Skaitlis.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "vidējais";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "lielākais";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediāna";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "mazākais";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "moda";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "nejaušs";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standartnovirze";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "summa";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Atgriež dotā saraksta vidējo aritmētisko vērtību.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Atgriež lielāko vērtību no saraksta.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Atgriež dotā saraksta mediānas vērtību.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Atgriež mazāko vērtību no saraksta.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Atgriež dotā saraksta biežāk sastopamās vērtības (modas).";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Atgriež nejauši izvēlētu vērtību no dotā saraksta.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Atgriež dotā saraksta standartnovirzi.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Saskaitīt visus skaitļus no dotā saraksta.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "nejaušs skaitlis [0..1)";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Atgriež nejaušu reālo skaitli robežās no 0 (iekļaujot) līdz 1 (neiekļaujot).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "nejaušs vesels skaitlis no %1 līdz %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Atgriež nejaušu veselu skaitli dotajās robežās (iekļaujot galapunktus)";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "noapaļot";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "apaļot uz leju";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "apaļot uz augšu";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Noapaļot skaitli uz augšu vai uz leju.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://lv.wikipedia.org/wiki/Kvadr%C4%81tsakne";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolūtā vērtība";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "kvadrātsakne";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Atgriež skaitļa absolūto vērtību.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Atgriež e pakāpē dotais skaitlis.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Atgriež skaitļa naturālo logaritmu.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Atgriež skaitļa logaritmu pie bāzes 10.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Atgriež pretējo skaitli.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Atgriež 10 pakāpē dotais skaitlis.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Atgriež skaitļa kvadrātsakni.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://lv.wikipedia.org/wiki/Trigonometrisk%C4%81s_funkcijas";
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Arkkosinuss (grādos).";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Arksinuss (grādos).";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Arktangenss (grādos).";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Kosinuss no grādiem (nevis radiāniem).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Sinuss no grādiem (nevis radiāniem).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Tangenss no grādiem (nevis radiāniem).";
Blockly.Msg.NEW_VARIABLE = "Izveidot mainīgo...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Jaunā mainīgā vārds:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "atļaut apakškomandas";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "ar:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Izpildīt iepriekš definētu funkcju '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Izpildīt iepriekš definētu funkcju '%1' un izmantot tās rezultātu.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "ar:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Izveidot '%1' izsaukumu";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Funkcijas apraksts...";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "darīt kaut ko";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "funkcija";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Izveido funkciju, kas neatgriež rezultātu.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "atgriezt";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Izveido funkciju, kas atgriež rezultātu.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Brīdinājums: funkcijai ir vienādi argumenti.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Izcelt funkcijas definīciju";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Ja pirmā vērtība ir \"patiesa\", tad atgriezt otro vērtību.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Brīdinājums: Šo bloku var izmantot tikai funkcijas definīcijā.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "arguments:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Pievienot funkcijai argumentu.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "argumenti";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Pievienot, pārkārtot vai dzēst funkcijas argumentus.";
Blockly.Msg.REDO = "Atcelt atsaukšanu";
Blockly.Msg.REMOVE_COMMENT = "Noņemt komentāru";
Blockly.Msg.RENAME_VARIABLE = "Pārdēvēt mainīgo...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Pārdēvējiet visus '%1' mainīgos:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "pievienot tekstu";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "tekstam";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Pievienot tekstu mainīgajam '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "kā mazie burti";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "kā Nosaukuma Burti";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "kā LIELIE BURTI";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Atgriež teksta kopiju ar mainītiem lielajiem/mazajiem burtiem.";
Blockly.Msg.TEXT_CHARAT_FIRST = "paņemt pirmo burtu";
Blockly.Msg.TEXT_CHARAT_FROM_END = "paņemt no beigām burtu #";
Blockly.Msg.TEXT_CHARAT_FROM_START = "paņemt burtu #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "tekstā";
Blockly.Msg.TEXT_CHARAT_LAST = "paņemt pēdējo burtu";
Blockly.Msg.TEXT_CHARAT_RANDOM = "paņemt nejaušu burtu";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Atgriež burtu dotajā pozīcijā.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Pievienot tekstam objektu.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "savienot";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Pievienot, noņemt vai mainīt sekciju secību šim \"teksta\" blokam.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "līdz burtam nr (no beigām)";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "līdz burtam nr";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "līdz pēdējam burtam";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "no teksta";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "paņemt apakšvirkni no sākuma";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "paņemt apakšvirkni no beigām sākot ar burta nr";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "paņemt apakšvirkni sākot no burta nr";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Atgriež norādīto teksta daļu.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "tekstā";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "meklēt pirmo vietu, kur sākas teksts";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "meklēt pēdējo vietu, kur sākas teksts";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Meklē pirmā teksta rindu otrajā tekstā. Atgriež pozīciju otrajā tekstā, kurā sākas pirmais teksts. Atgriež %1 ja pirmā teksta rinda nav atrasta.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 ir tukšs";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Patiess, ja teksts ir tukšs.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "veidot tekstu no";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Izveidot tekstu savienojot dotos argumentus.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "garums tekstam %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Atgriež burtu skaitu (ieskaitot atstarpes) dotajā tekstā.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "parādīt %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Parādīt norādīto tekstu vai skaitli.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Palūgt lietotāju ievadīt skaitli.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Palūgt lietotāju ievadīt tekstu.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "palūgt ievadīt skaitli ar ziņu";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "palūgt ievadīt tekstu ar ziņu";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Burts, vārds vai jebkāda teksta rinda.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "Dzēst atstarpes no abām pusēm";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "Dzēst atstarpes no sākuma";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "Dzēst atstarpes no beigām";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Atgriež teksta kopiju ar noņemtām atstarpēm vienā vai otrā galā.";
Blockly.Msg.TODAY = "Šodiena";
Blockly.Msg.UNDO = "Atsaukt";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "objekts";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Izveidot piešķiršanu mainīgajam %1";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Atgriež mainīgā vērtību.";
Blockly.Msg.VARIABLES_SET = "piešķirt mainīgajam %1 vērtību %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Izveidot 'ņem %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Piešķirt mainīgajam vērtību.";
Blockly.Msg.VARIABLE_ALREADY_EXISTS = "Mainīgais '%1' jau eksistē.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.KF_MATH_XY_TO_XY_MESSAGE_AFTER = Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_AFTER;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.KF_MATH_XY_TO_XY_MESSAGE_BEFORE = Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_BEFORE;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;